{"version":3,"sources":["assets/loading.gif","serviceWorker.js","components/JobList.js","components/TotalJobs.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","JobList","state","isLoading","totalJobs","jobs","apiJobs","error","fetch","then","response","json","data","setState","catch","BerufsfeldFilter","attributes","values","LevelFilter","ArbeitsortFilter","this","fetchJobs","fetchFilters","e","newArray","filter","d","title","toLowerCase","indexOf","target","value","className","container","spacing","item","xs","sm","TextField","variant","id","label","type","onChange","onChangeHandler","bind","src","loadingImg","alt","map","job","key","rel","href","links","directlink","Component","TotalJobs","total","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b8003366.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.d7102e2d.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Component} from 'react';\nimport Grid from \"@material-ui/core/Grid/Grid\";\nimport Paper from \"@material-ui/core/Paper/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport loadingImg from '../assets/loading.gif';\n\n\nclass JobList extends Component {\n\n    state = {\n        isLoading: true,\n        totalJobs: [],\n        jobs: [],\n        apiJobs: [],\n        error: null,\n    }\n\n\n    fetchJobs() {\n        fetch('https://ohws.prospective.ch/public/v1/medium/1000470/jobs?lang=de&limit=200&offset=0')\n            .then(response => response.json())\n            .then(data => {\n                    this.apiJobs = data.jobs;\n                    this.setState({\n                        jobs: data.jobs,\n                        isLoading: false,\n                    })\n                }\n            )\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    fetchFilters() {\n        fetch('https://ohws.prospective.ch/public/v1/medium/1000470/attributes/?lang=de')\n            .then(response => response.json())\n            .then(data => {\n                    this.setState({\n                        BerufsfeldFilter: data.attributes[0].values,\n                        LevelFilter: data.attributes[1],\n                        ArbeitsortFilter: data.attributes[2],\n                        isLoading: false,\n                    })\n                }\n            )\n            .catch(error => this.setState({error, isLoading: false}));\n    };\n\n    componentDidMount() {\n        this.fetchJobs();\n        this.fetchFilters();\n    };\n\n    onChangeHandler(e) {\n        let newArray = this.apiJobs.filter((d) => {\n            let searchValue = d.title.toLowerCase();\n            return searchValue.indexOf(e.target.value) !== -1;\n        });\n        this.setState({\n            jobs: newArray\n        })\n    };\n\n    render() {\n        const {isLoading, jobs, error} = this.state;\n\n        return (\n\n            <div>\n\n                <header>\n                    <div>\n\n                    </div>\n                </header>\n\n                <Grid className={\"filterContainer\"} container spacing={2}>\n                    <Grid item xs={12} sm={12}>\n                        <TextField variant=\"outlined\" id=\"standard-basic\" label=\"Suchbegriff\" type=\"text\"\n                                   value={this.state.value} onChange={this.onChangeHandler.bind(this)} />\n                    </Grid>\n                    {error ? <p>Keine Jobs, sorry</p> : null}\n                </Grid>\n\n                <Grid container spacing={2}>\n                    {!isLoading ? (\n                        jobs.map(job => {\n                            return (\n                                <Grid item xs={12} sm={12} key={job.id}>\n                                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={job.links.directlink}>\n                                        <Paper className={\"element\"}>\n                                            <h2>{job.title}</h2>\n                                            <br/>\n                                            <div><b>Abteilung: </b>{job.attributes[10]}</div>\n                                            <div><b>Erfahrung: </b>{job.attributes[20]}</div>\n                                            <div><b>Land: </b>{job.attributes[25]}</div>\n                                            <div><b>Ort: </b>{job.attributes[27]}</div>\n                                        </Paper>\n                                    </a>\n                                </Grid>\n                            );\n                        })\n                    ) : (\n                        <div className={\"loading\"}>\n                            <img className={\"loadingSpinner\"} src={loadingImg} alt=\"\"/>\n                            <div><b>Loading...</b></div>\n                        </div>\n                    )}\n                </Grid>\n            </div>\n        );\n    };\n}\n\nexport default JobList;\n","import React, {Component} from 'react';\n\nclass TotalJobs extends Component {\n\n    state = {\n        isLoading: true,\n        totalJobs: [],\n        error: null,\n    }\n\n    fetchJobs() {\n        fetch('https://ohws.prospective.ch/public/v1/medium/1000470/jobs?lang=de&limit=200&offset=0')\n            .then(response => response.json())\n            .then(data => {\n                    this.apiJobs = data.jobs;\n                    this.setState({\n                        totalJobs: data,\n                        isLoading: false,\n                    })\n                }\n            )\n            .catch(error => this.setState({error, isLoading: false}));\n    }\n\n    componentDidMount() {\n        this.fetchJobs();\n    }\n\n\n    render() {\n        const {totalJobs} = this.state;\n        return (\n            <div>\n                <h1>Jobs</h1>\n                <h5>Zur Zeit sind {totalJobs.total} Stellen ausgeschrieben</h5>\n            </div>\n        );\n    }\n}\n\nexport default TotalJobs;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport JobList from \"./components/JobList\";\nimport TotalJobs from \"./components/TotalJobs\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <main>\n\n\n          <TotalJobs/>\n          <JobList />\n      </main>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}